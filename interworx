#!/usr/bin/env python2

import errno
import os
import sys
import re
import sqlite3
import requests
from bs4 import BeautifulSoup
import click
import logging
import logging.handlers
from pprint import pprint as pp
import ConfigParser
import urlparse
from url_normalize import url_normalize


APP_NAME = 'interworx-cli'

class ui:
    @staticmethod
    def warn(msg):
        w = click.style('Warning:', bold=True, fg='yellow')
        m = click.style(msg, fg='yellow', reset=True)
        click.echo('{} {}'.format(w, m), err=True)

    @staticmethod
    def error(msg, exit=True):
        e = click.style('\nError:', bold=True, fg='red')
        m = click.style(msg, fg='red', reset=True)
        click.echo('{} {}'.format(e, m), err=True)
        if exit:
            sys.exit(1)

    @staticmethod
    def echo(msg):
        click.echo(msg)


class Interworx:
    def __init__(self, verbose=False):
        self.verbose = verbose
        self.home = click.get_app_dir(APP_NAME)
        self.log_file = os.path.join(self.home, 'interworx.log')
        self.config_file = os.path.join(self.home, 'config.ini')
        if not os.path.exists(self.home):
            ui.error('application dir not found: {}'.format(self.home), exit=False)
            click.secho('To create it, type:', fg='green')
            click.secho('mkdir {}'.format(self.home), bold=True)
            click.secho("And create the config.ini file while you're here:", fg='green')
            click.secho('touch {}'.format(self.config_file), bold=True)
            sys.exit()

        # setup logging
        f = logging.Formatter(
            fmt='%(asctime)s: %(levelname)s %(filename)s:%(lineno)d: %(message)s',
            datefmt="%Y-%m-%d %H:%M:%S")
        handler = logging.handlers.RotatingFileHandler(
            self.log_file, maxBytes=500000, backupCount=5)
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.INFO)
        handler.setFormatter(f)
        handler.setLevel(logging.DEBUG)
        root_logger.addHandler(handler)
        self.log = root_logger

    def _read_config(self):
        if not os.path.exists(self.config_file):
            ui.error('config file not found: {}'.format(self.config_file), exit=False)
            click.echo('To create it, type:')
            click.secho('touch {}'.format(self.config_file), bold=True)
            sys.exit()

        cfg = ConfigParser.RawConfigParser()
        try:
            cfg.read(self.config_file)
        except ConfigParser.ParsingError as e:
            ui.error(str(e))
        return cfg

    def _parse_server(self, server, data):
        if server not in data.sections():
            ui.error('"{}" not in the config.ini file.'.format(server), exit=False)
            avail = click.style(', '.join(data.sections()), fg='green')
            click.echo('Available servers: {}'.format(avail))
            sys.exit()

        class Server:
            def __init__(self):
                try:
                    self.username = data.get(server, 'username')
                    self.password = data.get(server, 'password')
                    self.url = data.get(server, 'url')
                    self.domain = data.get(server, 'domain')
                except ConfigParser.NoOptionError as e:
                    ui.error('config.ini: {}'.format(e))
                try:
                    self.label = data.get(server, 'label')
                except ConfigParser.NoOptionError as e:
                    self.label = ''
        s = Server()
        return s

    def right_page(self, page, which):
        soup = BeautifulSoup(page, 'html.parser')
        correct_page = False
        if which == 'home':
            box = soup.find('a', id='iw-menu-home')
            if not box:
                correct_page = False
            else:
                result = box.get_text()
                if result == 'SiteWorx Home':
                    correct_page = True
        elif which == 'firewall':
            form = soup.find('form', attrs={'name': 'firewall_allowhosts'})
            if form:
                correct_page = True
        return correct_page

    def delete_old(self, page):
        # collect all old with label
        soup = BeautifulSoup(page, 'html.parser')

    def update_server(self, server):
        data = self._read_config()
        server = self._parse_server(server, data)

        payload = {
            'email': server.username,
            'password': server.password,
            'domain': server.domain,
        }
        firewall_payload = {
            'i': {
                'a': 'livePayloadCommit',
                'c': 'index',
                'iw_payload_output': 'html',
                'iw_refresh_action': 'listIps',
                'iw_refresh_ctrl': 'Ctrl_Siteworx_Firewall',
                'iw_sess_hint': 'siteworx',
                'pgn8state': {
                    'd': 'asc',
                    'l': 0,
                    'o': 0,
                    'or': None
                },
                'refresh_on': [
                    ['addCommit', None],
                    ['editCommit', None],
                    ['deleteCommit', None]
                ],
                'security_token': 'hi41o6BV2iLIk7dBuSKVXrM9y7sE',
                'where_was_i': '/siteworx/firewall'
            },
            'r': 'Controller'
        }

        self.v('Post values:',
               ', '.join(['{}:{}'.format(i, j) for i, j in payload.items()]))

        tail = '/index?action=login'
        posturl = url_normalize(server.url + tail)
        self.v('Post url:', posturl)

        self.log.info('posturl: %s', posturl)
        with requests.Session() as s:
            # login page
            p = s.post(posturl, payload)
            if not self.right_page(p.text, which='home'):
                ui.error('Could not log in.')
            # firewall page
            firewall = url_normalize(server.url + '/firewall')
            # firewall = url_normalize(server.url + '/firewall#allow_hosts_settings-shell=%7B%22l%22%3A0%2C%22o%22%3A0%2C%22or%22%3Anull%2C%22d%22%3A%22asc%22%7D')
            self.log.info('firewall page: %s', firewall)
            self.v('firewall url:', firewall)
            fw = s.get(firewall)
            # fw = s.post(firewall, firewall_payload)
            token = self.get_token(fw)
            click.echo_via_pager(fw.text)
            if not self.right_page(fw.text, which='firewall'):
                ui.error('Could not navigate to firewall page.')
            self.delete_old(fw.text)
            # https://sip1-245.nexcess.net:2443/siteworx/firewall#allow_hosts_settings-shell=%7B%22l%22%3A0%2C%22o%22%3A0%2C%22or%22%3Anull%2C%22d%22%3A%22asc%22%7D

    def get_token(page):
        pass

    def v(self, title, msg):
        if self.verbose:
            click.echo('{} {}'.format(
                click.style(title, fg='green'),
                click.style(msg)
            ))

CONTEXT_SETTINGS = {
    'help_option_names': ['-h', '--help'],
    'token_normalize_func': lambda x: x.lower(),
}
@click.group(context_settings=CONTEXT_SETTINGS)
def main():
    """Interact with a interworx control panel"""

@main.command(context_settings=CONTEXT_SETTINGS)
@click.argument('server')
@click.option('-v', '--verbose', is_flag=True)
def updateip(server, verbose):
    """Update ip addresses in a interworx control panel"""
    n = Interworx(verbose=verbose)
    n.log.info('in updateip %s', server)
    n.update_server(server)

@main.command(name='list', context_settings=CONTEXT_SETTINGS)
@click.option('--all-info', '-a',
              help="Show usernames and passwords as well.")
def list_ips(all_info):
    """List the servers and their info"""

@main.command(context_settings=CONTEXT_SETTINGS)
@click.argument('server', required=False)
def inspect(server):
    """Inspect a server to see if an update is needed"""


if __name__ == '__main__':
    main()

    payload = {
        'i': {
            'a': 'livePayloadCommit',
            'c': 'index',
            'iw_payload_output': 'html',
            'iw_refresh_action': 'listIps',
            'iw_refresh_ctrl': 'Ctrl_Siteworx_Firewall',
            'iw_sess_hint': 'siteworx',
            'pgn8state': {
                'd': 'asc',
                'l': 0,
                'o': 0,
                'or': None
            },
            'refresh_on': [
                ['addCommit', None],
                ['editCommit', None],
                ['deleteCommit', None]
            ],
            'security_token': 'hi41o6BV2iLIk7dBuSKVXrM9y7sE',
            'where_was_i': '/siteworx/firewall'
        },
        'r': 'Controller'
    }

